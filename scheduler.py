import logging
import asyncio
from datetime import datetime
import config
import pytz
from config import pending_reminders, bot
from aiogram import Bot
from keyboards import reminder_kb
from storage import (load_reminder_settings, save_missed_entry, 
get_all_reminders, save_reminder_settings, get_user_timezone)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
import pytz
from storage import get_user_timezone

scheduler = AsyncIOScheduler()
user_jobs = {}  # user_id -> list of jobs
reminder_queue = None

def set_reminder_queue(queue):
    global reminder_queue
    reminder_queue = queue

async def send_reminder(user_id: int, run_time_str: str, bot: Bot):
    if config.is_waiting_for_entry.get(user_id, False):
        return

    user_tz = pytz.timezone(get_user_timezone(user_id))
    now = datetime.now(user_tz)

    config.is_waiting_for_entry[user_id] = True
    pending_reminders[user_id] = {
        "time": run_time_str,
        "sent_at": now
    }

    text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {run_time_str}: –ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
    await bot.send_message(user_id, text, reply_markup=reminder_kb(show_examples=True))

async def reminder_loop():
    while True:
        user_id, time_str = await reminder_queue.get()
        user_tz = pytz.timezone(get_user_timezone(user_id))
        now = datetime.now(user_tz)

        info = pending_reminders.get(user_id)

        if info and info.get("time") == time_str:
            continue

        if config.is_waiting_for_entry.get(user_id, False):
            if info and "sent_at" in info:
                sent_at = info["sent_at"]
                if (now - sent_at).total_seconds() >= 60:
                    save_missed_entry(user_id, info["time"])
                    await bot.send_message(
                        user_id,
                        f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {info['time']}, –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ ‚ùå –ø—Ä–æ–ø—É—Å–∫."
                    )
            pending_reminders.pop(user_id, None)
            config.is_waiting_for_entry[user_id] = False

        await send_reminder(user_id, time_str, bot)

async def load_all_reminders():
    reminder_settings = load_reminder_settings()
    for user_id_str, times in reminder_settings.items():
        try:
            user_id = int(user_id_str)
            restart_reminders_for_user(user_id, times)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id_str}: {e}")

def start_scheduler():
    scheduler.start()

def restart_reminders_for_user(user_id: int, times: list[str]):
    # üßπ 1. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    pending_reminders.pop(user_id, None)
    config.is_waiting_for_entry[user_id] = False

    # üíæ 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–∑—É (–¥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á)
    save_reminder_settings(user_id, times)

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—É—é –∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tz_name = get_user_timezone(user_id)
    user_tz = pytz.timezone(user_tz_name)

    # ‚ùå 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    old_jobs = user_jobs.get(user_id, [])
    for job in old_jobs:
        try:
            scheduler.remove_job(job.id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {job.id}: {e}")
    user_jobs[user_id] = []

    # ‚è∞ 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_jobs = []
    for t in times:
        hour, minute = map(int, t.split(":"))
        job = scheduler.add_job(
            lambda uid=user_id, time_str=t: reminder_queue.put_nowait((uid, time_str)),
            CronTrigger(hour=hour, minute=minute, timezone=user_tz),
            id=f"{user_id}_{t}",
            misfire_grace_time=60
        )
        new_jobs.append(job)
    user_jobs[user_id] = new_jobs

from datetime import datetime
import pytz

def get_now(user_id: int):
    tz = config.user_timezones.get(user_id)
    if tz:
        return datetime.now(pytz.timezone(tz))
    return datetime.now()