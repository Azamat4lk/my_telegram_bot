from scheduler import restart_reminders_for_user, user_jobs, scheduler # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º¬†—Ñ—É–Ω–∫—Ü–∏—é
from datetime import datetime, timedelta
from aiogram import types, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.types import (Message, FSInputFile,
Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import config
from config import pending_reminders, bot
from keyboards import (reminder_kb, remove_kb, start_kb, 
fix_kb, get_point_keyboard, points_options_kb, 
reminder_count_kb, get_example_button, examples, 
ReplyKeyboardRemove, examples_menu_kb, 
examples_section_kb, examples_edit_kb, examples as default_examples)
from storage import (save_entry, 
get_user_file, save_reminder_settings, 
clear_user_diary_with_backup, delete_last_entry, save_points, 
load_reminder_settings, get_or_create_user_points,
save_missed_entry, get_user_data, save_user_data, HIDDEN_MARKER)
from functools import wraps
import logging
import os
import re

router = Router()
user_indexes = {} 


QUESTIONS = [
    "‚ûï –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ?",
    "‚ûñ –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –æ—á–µ–Ω—å?",
    "üìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
]

info_text = (
    "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π Telegram-–±–æ—Ç ‚Äî —É–º–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –¥–µ–ª! üåü\n\n"
    "üìù –ß—Ç–æ —ç—Ç–æ?\n"
    "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç—Ä—ë—Ö –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:\n"
    "‚ûï –ü–ª—é—Å ‚Äî —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ?\n"
    "‚ûñ –ú–∏–Ω—É—Å ‚Äî —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ?\n"
    "üîú –°–¥–µ–ª–∞—Ç—å ‚Äî –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–ª–∞–Ω—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞?\n\n"
    "üí° –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω?\n"
    "- –ü–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
    "- –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤–∞–∂–Ω–æ, –∞ —á—Ç–æ ‚Äî –ø–æ–≤–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π\n"
    "- –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–ª–∞–Ω–∞—Ö –∏ —Ü–µ–ª—è—Ö\n"
    "- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∏–º –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
    "‚è∞ –£–¥–æ–±—Å—Ç–≤–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
    "- –ë–æ—Ç —Å–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç, –∫–æ–≥–¥–∞ –ø–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫\n"
    "- –í—Å—ë —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
    "- –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º!\n\n"
    "üåà –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
    "–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è, –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É–ª—É—á—à–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. "
    "–ê –Ω–∞—à –±–æ—Ç –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! üéâ\n\n"
    "üì≤ –ù–∞—á–Ω–∏—Ç–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–¥–µ–ª–∞–π—Ç–µ —à–∞–≥ –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–π –∂–∏–∑–Ω–∏ —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n\n"
     "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω üë®‚Äçüíª –°–∞—Ñ–∞—Ä–æ–≤—ã–º –ê–∑–∞–º–∞—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ü§ñ ChatGPT"
    "[ChatGPT –æ—Ç OpenAI](https://chat.openai.com).\n\n"
    "–¢—ã —Ç–æ–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å—Ç—å) –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á ‚Äî –∑–∞—Ö–æ–¥–∏ –∏ –∑–Ω–∞–∫–æ–º—å—Å—è!"
)

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
SECTION_MAP = {
    "‚ûï –ü–ª—é—Å—ã": "0",
    "‚ûñ –ú–∏–Ω—É—Å—ã": "1",
    "‚úÖ –°–¥–µ–ª–∞–Ω–æ": "2"
}

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class ReminderStates(StatesGroup):
    choosing_count = State()
    typing_times = State()
class PointsSettings(StatesGroup):
    choosing_action = State()
    editing_points = State()
    adding_points = State()
class ExampleStates(StatesGroup):
    choosing_action = State()
    choosing_section = State()
    choosing_edit = State()
    adding_example = State()
    replacing_examples = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: user_id -> {step: int, answers: list}
user_states = {}

@router.message(F.text == "üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def fix_last_entry(message: Message):
    user_id = message.from_user.id
    config.is_waiting_for_entry[user_id] = True
    pending_reminders[user_id] = datetime.now().strftime("%H:%M")
    delete_last_entry(user_id)
    user_states[user_id] = {"step": 0, "answers": [], "mode": "entry"}
    await message.answer("–û–∫–µ–π, –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n" + QUESTIONS[0], reply_markup=remove_kb)

@router.message(F.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")
async def keep_entry(message: Message):
    user_id = message.from_user.id
    pending_reminders.pop(user_id, None)
    state = user_states.get(user_id)
    if not state or "answers" not in state:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    index = user_indexes.get(user_id, 0)
    points = get_or_create_user_points(user_id)
    point_text = points[index % len(points)]
    entry = "\n".join(f"{QUESTIONS[i]} {state['answers'][i]}" for i in range(len(QUESTIONS)))
    save_entry(user_id, entry, point_text)
    user_indexes[user_id] = index + 1  # ‚úÖ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–µ—Å—å
    user_states.pop(user_id)
    config.is_waiting_for_entry[user_id] = False
    await message.answer("üìî –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìå", reply_markup=start_kb)

@router.message(F.text == "üìù –ë—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å")
async def record_entry(message: Message):
    user_id = message.from_user.id
    config.is_waiting_for_entry[user_id] = True
    pending_reminders[user_id] = datetime.now().strftime("%H:%M")
    user_points = get_or_create_user_points(user_id)
    index = user_indexes.get(user_id, 0)
    if not user_points:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ üìñ –ú–æ–∏ –ø—É–Ω–∫—Ç—ã.")
        return
    point_number = (index % len(user_points)) + 1
    point_text = user_points[index % len(user_points)]
    user_states[user_id] = {
        "step": 0,
        "answers": [],
        "mode": "entry",
        "point": point_text
    }
    await message.answer(f"<b>üß† –ü—É–Ω–∫—Ç ‚Ññ{point_number}:</b>\n\n{point_text}")
    await message.answer(QUESTIONS[0], reply_markup=get_example_button("0"))

@router.message(F.text == "üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def refuse(message: Message):
    user_id = message.chat.id
    config.is_waiting_for_entry[user_id] = False
    pending_reminders.pop(user_id, None)
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–∞–∑
    save_missed_entry(user_id, "–æ—Ç–∫–∞–∑")
    await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. üì≠", reply_markup=start_kb)

@router.callback_query(F.data.startswith("example:"))
async def send_example_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    question_type = callback.data.split(":")[1]
    user_data = get_user_data(user_id)
    user_examples = user_data.get("examples", {})
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    examples_list = user_examples.get(question_type)
    # –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    if not examples_list:
        examples_list = default_examples.get(question_type, [])
    # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
    if not examples_list:
        await callback.message.answer("üòî –ü—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        section_titles = {"0": "–ü–ª—é—Å—ã", "1": "–ú–∏–Ω—É—Å—ã", "2": "–°–¥–µ–ª–∞–Ω–Ω–æ–µ"}
        section = section_titles.get(question_type, "—Ä–∞–∑–¥–µ–ª")
        text = f"<b>–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è {section}:</b>\n" + "\n".join(f"‚Ä¢ {ex}" for ex in examples_list)
        await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

async def ask_next_point(user_id: int):
    state = user_states.get(user_id)
    if not state:
        return
    answers = state.get("answers", [])
    step = len(answers)
    if step >= len(QUESTIONS):
        # –ö–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å
        preview = "\n".join(f"{QUESTIONS[i]} {answers[i]}" for i in range(len(QUESTIONS)))
        await bot.send_message(
            user_id,
            f"üìã –í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\n{preview}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=fix_kb
        )
        return
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = QUESTIONS[step]
    markup = get_example_button(str(step))  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–≥–¥–∞
    await bot.send_message(user_id, question, reply_markup=markup)

"""
def block_during_entry(handler):
    @wraps(handler)
    async def wrapper(message: Message, *args, **kwargs):
        user_id = message.from_user.id
        if config.is_waiting_for_entry.get(user_id):
            logging.info(f"[BLOCKED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.")
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.")
            return
        logging.info(f"[ALLOWED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É.")
        return await handler(message, *args, **kwargs)
    return wrapper
"""

# 
# 
@router.message(F.text == "üß† –ü—Ä–∏–º–µ—Ä—ã")
#@block_during_entry
async def examples_menu(msg: types.Message, state: FSMContext):
    await msg.answer("‚úè –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏?", reply_markup=examples_menu_kb)
    await state.set_state(ExampleStates.choosing_action)

@router.message(F.text == "üìã –ú–æ–∏ –ø—Ä–∏–º–µ—Ä—ã")
#@block_during_entry
async def show_user_examples(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    user_data = get_user_data(user_id)
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_examples = user_data.get("examples", {})
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö
    result = ""
    for section, label in [("0", "‚ûï –ü–ª—é—Å—ã"), ("1", "‚ûñ –ú–∏–Ω—É—Å—ã"), ("2", "‚úÖ –°–¥–µ–ª–∞–Ω–æ")]:
        examples_list = user_examples.get(section)
        if examples_list is None:
            examples_list = default_examples.get(section, [])
        if examples_list:
            result += f"<b>{label}:</b>\n" + "\n".join(f"‚Ä¢ {ex}" for ex in examples_list) + "\n\n"
    if not result:
        result = "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤."
    await msg.answer(result.strip(), reply_markup=examples_menu_kb, parse_mode="HTML")

@router.message(ExampleStates.choosing_action, F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
#@block_during_entry
async def choose_section_to_edit(msg: types.Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã:", reply_markup=examples_section_kb)
    await state.set_state(ExampleStates.choosing_section)

@router.message(ExampleStates.choosing_section, F.text.in_(SECTION_MAP.keys()))
#@block_during_entry
async def choose_edit_action(msg: types.Message, state: FSMContext):
    await state.update_data(section=SECTION_MAP[msg.text])
    await msg.answer(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {msg.text}?", reply_markup=examples_edit_kb)
    await state.set_state(ExampleStates.choosing_edit)

@router.message(ExampleStates.choosing_edit, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä")
#@block_during_entry
async def start_adding_example(msg: types.Message, state: FSMContext):
    await msg.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ExampleStates.adding_example)

@router.message(ExampleStates.adding_example)
#@block_during_entry
async def save_added_example(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    user_data = get_user_data(user_id)
    data = await state.get_data()
    section = data.get("section")
    example = msg.text.strip()
    if not example:
        await msg.answer("‚ö† –ü—Ä–∏–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    # –î–æ—Å—Ç–∞—ë–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    if "examples" not in user_data:
        user_data["examples"] = {}
    if section not in user_data["examples"]:
        user_data["examples"][section] = []
    # –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –µ—â—ë –Ω–µ—Ç
    if example not in user_data["examples"][section]:
        user_data["examples"][section].append(example)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_user_data(user_id, user_data)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
    result = "\n".join(f"‚Ä¢ {ex}" for ex in user_data["examples"][section])
    await msg.answer(
        f"‚úÖ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nüìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n{result}",
        reply_markup=examples_menu_kb
    )
    await state.set_state(ExampleStates.choosing_action)

@router.message(ExampleStates.choosing_edit, F.text == "‚ôª –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
#@block_during_entry
async def start_replacing_examples(msg: types.Message, state: FSMContext):
    await msg.answer(
        "üóë –í—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
        "‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã *–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é*. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –ì–æ—Ç–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
    await state.update_data(new_examples=[])
    await state.set_state(ExampleStates.replacing_examples)

@router.message(ExampleStates.replacing_examples, F.text.casefold() == "–≥–æ—Ç–æ–≤–æ")
#@block_during_entry
async def finish_replacing(msg: types.Message, state: FSMContext):
    user_data = get_user_data(msg.from_user.id)
    data = await state.get_data()
    section = data.get("section")
    new_examples = data.get("new_examples", [])
    if new_examples:
        user_data.setdefault("examples", {})[section] = new_examples
        save_user_data(msg.from_user.id, user_data)
        result = "\n".join(f"‚Ä¢ {ex}" for ex in new_examples)
        await msg.answer(f"‚úÖ –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\nüìã –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n{result}", reply_markup=examples_menu_kb)
    else:
        await msg.answer("‚ö† –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞. –°—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", reply_markup=examples_menu_kb)
    await state.set_state(ExampleStates.choosing_action)

@router.message(ExampleStates.replacing_examples)
#@block_during_entry
async def collect_example(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    if not text:
        await msg.answer("‚ö† –ü—Ä–∏–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = await state.get_data()
    new_examples = data.get("new_examples", [])
    new_examples.append(text)
    await state.update_data(new_examples=new_examples)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
#@block_during_entry
async def go_back(msg: types.Message, state: FSMContext):
    await state.clear()
    await examples_menu(msg, state)
# 
# 
# 

@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
#@block_during_entry
async def back_from_count(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=start_kb)

@router.message(F.text == "‚öô –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
#@block_during_entry
async def start_reminder_change(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", reply_markup=reminder_count_kb)
    await state.set_state(ReminderStates.choosing_count)

@router.message(ReminderStates.choosing_count, F.text == "üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
#@block_during_entry
async def turn_off_reminders(message: Message, state: FSMContext):
    user_id = message.from_user.id
    jobs = user_jobs.get(user_id, [])
    for job in jobs:
        scheduler.remove_job(job.id)
    user_jobs[user_id] = []
    save_reminder_settings(user_id, [])
    await message.answer("üîï –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'.", reply_markup=start_kb)
    await state.clear()


@router.message(ReminderStates.choosing_count)
#@block_during_entry
async def get_reminder_count(message: Message, state: FSMContext):
    match = re.match(r"(\d+) —Ä–∞–∑", message.text)
    if not match:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=reminder_count_kb)
        return
    count = int(match.group(1))
    await state.update_data(count=count)
    await state.set_state(ReminderStates.typing_times)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {count} –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 08:00,¬†14:00,¬†20:00:")

@router.message(ReminderStates.typing_times)
#@block_during_entry
async def get_reminder_times(message: Message, state: FSMContext):
    data = await state.get_data()
    count = data.get("count")
    times = [t.strip() for t in message.text.split(",") if t.strip()]
    time_pattern = re.compile(r"^(2[0-3]|[01]?[0-9]):[0-5][0-9]$")
    # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if len(times) != count:
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {count} —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ {count} –≤—Ä–µ–º–µ–Ω–∏.")
        return
    # üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not all(time_pattern.match(t) for t in times):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 08:00, 14:30, 20:00")
        return
    # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if len(set(times)) != len(times):
        await message.answer("‚ö† –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    # ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    user_id = message.from_user.id
    # üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–æ
    if config.is_waiting_for_entry.get(user_id, False):
        config.is_waiting_for_entry[user_id] = False
        pending_reminders.pop(user_id, None)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    save_reminder_settings(user_id, times)
    restart_reminders_for_user(user_id, times)
    await message.answer(f"–•–æ—Ä–æ—à–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –≤: {', '.join(times)}", reply_markup=start_kb)
    await state.clear()

@router.message(F.text == "üïí –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
#@block_during_entry
async def show_my_reminders(message: Message):
    user_id = str(message.from_user.id)
    settings = load_reminder_settings()
    times = settings.get(user_id, [])
    if not times:
        await message.answer("‚ùó–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        formatted = '\n'.join([f"üîπ {t}" for t in times])
        await message.answer(f"üìÖ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{formatted}")
        
@router.message(F.text == "üìñ –ú–æ–∏ –ø—É–Ω–∫—Ç—ã")
#@block_during_entry
async def show_points(message: Message):
    user_id = message.from_user.id
    user_points = get_or_create_user_points(user_id)
    if not user_points:
        await message.answer("–ü—É–Ω–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    text = "<b>üìñ –¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—É–Ω–∫—Ç—ã:</b>\n\n" + "\n".join(user_points)
    await message.answer(text)


@router.message(F.text == "üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫")
#@block_during_entry
async def send_diary_file(message: Message):
    user_id = message.from_user.id
    file_path = get_user_file(user_id)
    if not os.path.exists(file_path):
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    diary_file = FSInputFile(file_path)
    await message.answer_document(document=diary_file, caption="–í–æ—Ç –≤–∞—à¬†–¥–Ω–µ–≤–Ω–∏–∫¬†üìî")


@router.message(F.text == "üß© –ò–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
#@block_during_entry
async def change_points(message: Message, state: FSMContext):
    await state.set_state(PointsSettings.choosing_action)
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—É–Ω–∫—Ç–∞–º–∏?",
        reply_markup=points_options_kb
    )

@router.message(PointsSettings.choosing_action)
#@block_during_entry
async def process_points_action(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø—É–Ω–∫—Ç—ã":
        await state.set_state(PointsSettings.editing_points)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
            "<code>1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç\n2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç\n3. ...</code>",
            reply_markup=remove_kb
        )
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã":
        await state.set_state(PointsSettings.adding_points)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —è –¥–æ–±–∞–≤–ª—é –∏—Ö –≤ –∫–æ–Ω–µ—Ü.",
            reply_markup=remove_kb
        )
    elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=start_kb)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç¬†—Å¬†–∫–Ω–æ–ø–∫–∏.")

@router.message(F.text == "‚Ñπ –û –±–æ—Ç–µ")
#@block_during_entry
async def shpw_about_info(message: Message):
    await message.answer(info_text)

@router.message(PointsSettings.editing_points)
#@block_during_entry
async def save_new_points(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    new_points = [line.strip() for line in text.splitlines() if line.strip()]
    if not new_points:
        await message.answer("–ü—É–Ω–∫—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.")
        return
    save_points(user_id, new_points)
    await message.answer(
        f"‚úÖ –ü—É–Ω–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω—ã.\n–í—Å–µ–≥–æ: {len(new_points)}",
        reply_markup=start_kb
    )
    await state.clear()

@router.message(PointsSettings.adding_points)
#@block_during_entry
async def add_more_points(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    new_points = [line.strip() for line in text.splitlines() if line.strip()]
    if not new_points:
        await message.answer("–ü—É–Ω–∫—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.")
        return
    existing_points = get_or_create_user_points(user_id)
    new_points = existing_points + new_points
    save_points(user_id, new_points)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_points)} –ø—É–Ω–∫—Ç(–æ–≤).\n–í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å: {len(new_points)}", reply_markup=start_kb)
    await state.clear()

@router.message(lambda message: config.is_waiting_for_entry.get(message.from_user.id, False))
async def process_message(message: Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if not state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üîΩ")
        return
    step = state.get('step', 0)
    answers = state.get('answers', [])
    answers.append(message.text)
    state['answers'] = answers
    state['step'] = step + 1  # ‚úÖ –∑–¥–µ—Å—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
    await ask_next_point(user_id)

@router.message(Command("start"))
#@block_during_entry
async def cmd_start(message: Message):
    user_id = message.from_user.id
    get_or_create_user_points(user_id)
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –Ø —Ç–≤–æ–π –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫.\n\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ 3 —Ä–∞–∑–∞:\n"
        "‚ûï –ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n"
        "‚ûñ –ß—Ç–æ –±—ã–ª–æ –Ω–µ —Ç–∞–∫\n"
        "üìå –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å\n\n"
        "üîΩ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=start_kb
    )
    await message.answer(
    "üí° –ö–æ–º–∞–Ω–¥—ã:\n"
    "/help - –ü–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
    "/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫\n"
    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏¬†–Ω–∏–∂–µ¬†üëá"
)

@router.message(Command("help"))
#@block_during_entry
async def help_command(message: Message):
    await message.answer(
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏:\n"
        "üìù –ë—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å\n"
        "üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é\n"
        "‚öô –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É\n"
        "üß© –ò–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç—ã ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n"
        "‚Ñπ –û –±–æ—Ç–µ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ¬†—Ä–∞–±–æ—Ç–µ\n", 
        reply_markup=start_kb
    )

@router.message(Command("clear"))
#@block_during_entry
async def clear_diary(message: Message):
    user_id = message.chat.id
    clear_user_diary_with_backup(user_id)
    filepath = get_user_file(user_id)
    document = FSInputFile(filepath)
    await message.answer_document(document=document, reply_markup=start_kb, caption="üßπ –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –æ—á–∏—â–µ–Ω. –ù–æ–≤—ã–π¬†—Ñ–∞–π–ª¬†—Å–æ–∑–¥–∞–Ω.")

# edit_diary.py
DIARY_FOLDER = "diaries"

QUESTIONS = [
    "‚ûï –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ?",
    "‚ûñ –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –æ—á–µ–Ω—å?",
    "üìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
]

if not os.path.exists(DIARY_FOLDER):
    os.makedirs(DIARY_FOLDER)

class EditDiaryStates(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_record_number = State()
    waiting_for_edit_choice = State()
    waiting_for_new_text = State()
    waiting_for_continue_or_finish = State()

def get_user_file(user_id: int) -> str:
    return os.path.join(DIARY_FOLDER, f"{user_id}.txt")

def load_diary(user_id: int) -> list[str]:
    filepath = get_user_file(user_id)
    if not os.path.exists(filepath):
        return []
    with open(filepath, "r", encoding="utf-8") as f:
        content = f.read()
        entries = [e.strip() for e in content.strip().split("\n\n") if e.strip()]
        if entries and entries[0].startswith("–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫"):
            entries.pop(0)
        return entries

def save_diary(user_id: int, records: list[str]):
    filename = get_user_file(user_id)
    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n\n".join(records))

@router.message(Command("cancel"), StateFilter("*"))
#@block_during_entry
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=start_kb)

@router.message(EditDiaryStates.waiting_for_search_query)
#@block_during_entry
async def process_search_query(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    query = message.text.strip().lower()
    diary = load_diary(user_id)
    if not diary:
        await message.answer("üì≠ –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        await state.clear()
        return
    skip_words = [f"{HIDDEN_MARKER}–ø—Ä–æ–ø—É—Å–∫"]
    filtered_entries = []
    for idx, entry in enumerate(diary):
        entry_lower = entry.lower()
        if any(word in entry_lower for word in skip_words):
            continue
        if f"{HIDDEN_MARKER}üìì –º–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üìì" in entry_lower:
            continue  # ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏
        if query in entry_lower:
            filtered_entries.append((idx, entry))
    if not filtered_entries:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return
    await state.update_data(found_records=filtered_entries)
    text = "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:\n\n"
    for i, (_, record) in enumerate(filtered_entries, start=1):
        lines = record.strip().splitlines()
        points = [line for line in lines if line.startswith("üìç")]
        header = lines[0] if lines else "..."
        plus = next((line for line in lines if line.startswith("‚ûï")), "")
        minus = next((line for line in lines if line.startswith("‚ûñ")), "")
        todo = next((line for line in lines if line.startswith("üìå")), "")
        parts = [header]
        parts.extend(points)
        parts.extend([plus, minus, todo])
        text += f"–ù–æ–º–µ—Ä: {i}\n" + "\n".join([p for p in parts if p]) + "\n\n"
    await message.answer(text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(EditDiaryStates.waiting_for_record_number)

@router.message(EditDiaryStates.waiting_for_record_number)
#@block_during_entry
async def process_record_number(message: Message, state: FSMContext):
    data = await state.get_data()
    found = data.get("found_records", [])
    try:
        num = int(message.text.strip())
        if not (1 <= num <= len(found)):
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel.")
        return
    selected_idx, selected_record = found[num - 1]
    await state.update_data(selected_idx=selected_idx)
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü–ª—é—Å", callback_data="edit_plus")],
        [InlineKeyboardButton(text="‚ûñ –ú–∏–Ω—É—Å", callback_data="edit_minus")],
        [InlineKeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å", callback_data="edit_todo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ])
    await message.answer(f"üìù –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å:\n\n{selected_record}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=buttons)
    await state.set_state(EditDiaryStates.waiting_for_edit_choice)

@router.callback_query(F.data.in_({"edit_plus", "edit_minus", "edit_todo", "edit_cancel"}))
#@block_during_entry
async def process_edit_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "edit_cancel":
        await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=start_kb)
        await state.clear()
        await callback.answer()
        return
    part_map = {
        "edit_plus": ("‚ûï", 1),
        "edit_minus": ("‚ûñ", 2),
        "edit_todo": ("üìå", 3)
    }
    symbol, line_idx = part_map.get(choice, (None, None))
    if symbol is None:
        await callback.answer("üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    await state.update_data(edit_symbol=symbol, line_idx=line_idx)
    await callback.message.answer(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–Ω–∫—Ç–∞ {symbol}:")
    await state.set_state(EditDiaryStates.waiting_for_new_text)
    await callback.answer()

@router.message(EditDiaryStates.waiting_for_new_text)
#@block_during_entry
async def process_new_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    selected_idx = data.get("selected_idx")
    edit_symbol = data.get("edit_symbol")
    new_text = message.text.strip()
    if selected_idx is None or edit_symbol is None:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    if not new_text:
        await message.answer("‚ùó –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        return
    diary = load_diary(user_id)
    if selected_idx >= len(diary):
        await message.answer("‚ö† –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    lines = diary[selected_idx].splitlines()
    prefix_map = {
        "‚ûï": "‚ûï",
        "‚ûñ": "‚ûñ",
        "üìå": "üìå"
    }
    prefix = prefix_map.get(edit_symbol)
    if not prefix:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
    updated = False
    for i, line in enumerate(lines):
        if line.startswith(prefix):
            lines[i] = f"{prefix} {new_text}"
            updated = True
            break
    if not updated:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    diary[selected_idx] = "\n".join(lines)
    save_diary(user_id, diary)
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n{diary[selected_idx]}")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_continue")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="edit_finish")]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏?", reply_markup=buttons)
    await state.set_state(EditDiaryStates.waiting_for_continue_or_finish)

#@block_during_entry
@router.callback_query(EditDiaryStates.waiting_for_continue_or_finish, F.data.in_({"edit_continue", "edit_finish"}))
async def process_continue_or_finish(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "edit_continue":
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ü–ª—é—Å", callback_data="edit_plus")],
            [InlineKeyboardButton(text="‚ûñ –ú–∏–Ω—É—Å", callback_data="edit_minus")],
            [InlineKeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å", callback_data="edit_todo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
        ])
        await callback.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=buttons)
        await state.set_state(EditDiaryStates.waiting_for_edit_choice)
    else:
        await callback.message.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=start_kb)
        await state.clear()

async def ask_next_point(user_id: int):
    state = user_states.get(user_id)
    if not state:
        return
    answers = state.get("answers", [])
    step = len(answers)
    if step >= len(QUESTIONS):
        # –ö–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å
        preview = "\n".join(f"{QUESTIONS[i]} {answers[i]}" for i in range(len(QUESTIONS)))
        await bot.send_message(
            user_id,
            f"üìã –í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\n{preview}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=fix_kb
        )
        return
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = QUESTIONS[step]
    markup = get_example_button(str(step))  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–≥–¥–∞
    await bot.send_message(user_id, question, reply_markup=markup)

@router.message(Command("search"))
#@block_during_entry
async def cmd_search_start(message: Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-24) –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditDiaryStates.waiting_for_search_query)

@router.message()
async def catch_unexpected_text(message: Message):
    user_id = message.from_user.id
    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
    if not config.is_waiting_for_entry.get(user_id, False):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if message.text.startswith("/start") or message.text.startswith("/clear") or message.text.startswith("/help") or message.text.startswith("/serach") or message.text.startswith("/cancel"):
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start¬†–¥–ª—è¬†–Ω–∞—á–∞–ª–∞.")