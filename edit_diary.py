import os
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import start_kb, ReplyKeyboardRemove, fix_kb, remove_kb
from handlers import (block_during_entry, pending_reminders, 
user_states, user_indexes, get_example_button)
from storage import (save_entry, get_or_create_user_points,
save_missed_entry, delete_last_entry)
from datetime import datetime
from config import bot
import config

router = Router()

DIARY_FOLDER = "diaries"

QUESTIONS = [
    "‚ûï –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ?",
    "‚ûñ –ß—Ç–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –æ—á–µ–Ω—å?",
    "üìå –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
]

@router.message(F.text == "üîÅ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def fix_last_entry(message: Message):
    user_id = message.from_user.id
    config.is_waiting_for_entry[user_id] = True
    pending_reminders[user_id] = datetime.now().strftime("%H:%M")
    delete_last_entry(user_id)
    user_states[user_id] = {"step": 0, "answers": [], "mode": "entry"}
    await message.answer("–û–∫–µ–π, –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n" + QUESTIONS[0], reply_markup=remove_kb)

@router.message(F.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")
async def keep_entry(message: Message):
    user_id = message.from_user.id
    pending_reminders.pop(user_id, None)
    state = user_states.get(user_id)
    if not state or "answers" not in state:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    index = user_indexes.get(user_id, 0)
    points = get_or_create_user_points(user_id)
    point_text = points[index % len(points)]
    entry = "\n".join(f"{QUESTIONS[i]} {state['answers'][i]}" for i in range(len(QUESTIONS)))
    save_entry(user_id, entry, point_text)
    user_indexes[user_id] = index + 1  # ‚úÖ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–¥–µ—Å—å
    user_states.pop(user_id)
    config.is_waiting_for_entry[user_id] = False
    await message.answer("üìî –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìå")
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-24) –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel:", reply_markup=start_kb)

@router.message(F.text == "üìù –ë—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å")
async def record_entry(message: Message):
    user_id = message.from_user.id
    config.is_waiting_for_entry[user_id] = True
    pending_reminders[user_id] = datetime.now().strftime("%H:%M")
    user_points = get_or_create_user_points(user_id)
    index = user_indexes.get(user_id, 0)
    if not user_points:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ üìñ –ú–æ–∏ –ø—É–Ω–∫—Ç—ã.")
        return
    point_number = (index % len(user_points)) + 1
    point_text = user_points[index % len(user_points)]
    user_states[user_id] = {
        "step": 0,
        "answers": [],
        "mode": "entry",
        "point": point_text
    }
    await message.answer(f"<b>üß† –ü—É–Ω–∫—Ç ‚Ññ{point_number}:</b>\n\n{point_text}")
    await message.answer(QUESTIONS[0], reply_markup=get_example_button("0"))

@router.message(F.text == "üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def refuse(message: Message):
    user_id = message.chat.id
    config.is_waiting_for_entry[user_id] = False
    pending_reminders.pop(user_id, None)
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–∞–∑
    save_missed_entry(user_id, "–æ—Ç–∫–∞–∑")
    await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. üì≠")
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-24) –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel:", reply_markup=start_kb)

@router.message(lambda message: config.is_waiting_for_entry.get(message.from_user.id, False))
async def process_message(message: Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    if not state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    step = state.get('step', 0)
    answers = state.get('answers', [])
    answers.append(message.text)
    state['answers'] = answers
    state['step'] = step + 1  # ‚úÖ –∑–¥–µ—Å—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
    await ask_next_point(user_id)

if not os.path.exists(DIARY_FOLDER):
    os.makedirs(DIARY_FOLDER)

class EditDiaryStates(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_record_number = State()
    waiting_for_edit_choice = State()
    waiting_for_new_text = State()
    waiting_for_continue_or_finish = State()

def get_user_file(user_id: int) -> str:
    return os.path.join(DIARY_FOLDER, f"{user_id}.txt")

def load_diary(user_id: int) -> list[str]:
    filepath = get_user_file(user_id)
    if not os.path.exists(filepath):
        return []
    with open(filepath, "r", encoding="utf-8") as f:
        content = f.read()
        entries = [e.strip() for e in content.strip().split("\n\n") if e.strip()]
        if entries and entries[0].startswith("–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫"):
            entries.pop(0)
        return entries

def save_diary(user_id: int, records: list[str]):
    filename = get_user_file(user_id)
    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n\n".join(records))

@router.message(Command("cancel"), StateFilter("*"))
@block_during_entry
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=start_kb)

@router.message(EditDiaryStates.waiting_for_search_query)
@block_during_entry
async def process_search_query(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    query = message.text.strip().lower()
    diary = load_diary(user_id)
    if not diary:
        await message.answer("üì≠ –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        await state.clear()
        return
    skip_words = ["–ø—Ä–æ–ø—É—Å–∫", "–ø—Ä–æ–ø—É—â–µ–Ω–æ", "–æ—Ç–ª–æ–∂–µ–Ω–æ", "–æ—Ç–ª–æ–∂–∏—Ç—å"]
    filtered_entries = []
    for idx, entry in enumerate(diary):
        entry_lower = entry.lower()
        if any(word in entry_lower for word in skip_words):
            continue
        if "üìì –º–æ–π –¥–Ω–µ–≤–Ω–∏–∫ üìì" in entry_lower:
            continue  # ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏
        if query in entry_lower:
            filtered_entries.append((idx, entry))
    if not filtered_entries:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return
    await state.update_data(found_records=filtered_entries)
    text = "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:\n\n"
    for i, (_, record) in enumerate(filtered_entries, start=1):
        lines = record.strip().splitlines()
        points = [line for line in lines if line.startswith("üìç")]
        header = lines[0] if lines else "..."
        plus = next((line for line in lines if line.startswith("‚ûï")), "")
        minus = next((line for line in lines if line.startswith("‚ûñ")), "")
        todo = next((line for line in lines if line.startswith("üìå")), "")
        parts = [header]
        parts.extend(points)
        parts.extend([plus, minus, todo])
        text += f"{i})\n" + "\n".join([p for p in parts if p]) + "\n\n"
    await message.answer(text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(EditDiaryStates.waiting_for_record_number)

@router.message(EditDiaryStates.waiting_for_record_number)
@block_during_entry
async def process_record_number(message: Message, state: FSMContext):
    data = await state.get_data()
    found = data.get("found_records", [])
    try:
        num = int(message.text.strip())
        if not (1 <= num <= len(found)):
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel.")
        return
    selected_idx, selected_record = found[num - 1]
    await state.update_data(selected_idx=selected_idx)
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü–ª—é—Å", callback_data="edit_plus")],
        [InlineKeyboardButton(text="‚ûñ –ú–∏–Ω—É—Å", callback_data="edit_minus")],
        [InlineKeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å", callback_data="edit_todo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ])
    await message.answer(f"üìù –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å:\n\n{selected_record}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=buttons)
    await state.set_state(EditDiaryStates.waiting_for_edit_choice)

@router.callback_query(F.data.in_({"edit_plus", "edit_minus", "edit_todo", "edit_cancel"}))
@block_during_entry
async def process_edit_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data
    if choice == "edit_cancel":
        await callback.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=start_kb)
        await state.clear()
        await callback.answer()
        return
    part_map = {
        "edit_plus": ("‚ûï", 1),
        "edit_minus": ("‚ûñ", 2),
        "edit_todo": ("üìå", 3)
    }
    symbol, line_idx = part_map.get(choice, (None, None))
    if symbol is None:
        await callback.answer("üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    await state.update_data(edit_symbol=symbol, line_idx=line_idx)
    await callback.message.answer(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–Ω–∫—Ç–∞ {symbol}:")
    await state.set_state(EditDiaryStates.waiting_for_new_text)
    await callback.answer()

@router.message(EditDiaryStates.waiting_for_new_text)
@block_during_entry
async def process_new_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    selected_idx = data.get("selected_idx")
    edit_symbol = data.get("edit_symbol")
    new_text = message.text.strip()
    if selected_idx is None or edit_symbol is None:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    if not new_text:
        await message.answer("‚ùó –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        return
    diary = load_diary(user_id)
    if selected_idx >= len(diary):
        await message.answer("‚ö† –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    lines = diary[selected_idx].splitlines()
    prefix_map = {
        "‚ûï": "‚ûï",
        "‚ûñ": "‚ûñ",
        "üìå": "üìå"
    }
    prefix = prefix_map.get(edit_symbol)
    if not prefix:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
    updated = False
    for i, line in enumerate(lines):
        if line.startswith(prefix):
            lines[i] = f"{prefix} {new_text}"
            updated = True
            break
    if not updated:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel")
        await state.clear()
        return
    diary[selected_idx] = "\n".join(lines)
    save_diary(user_id, diary)
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n{diary[selected_idx]}")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_continue")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="edit_finish")]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏?", reply_markup=buttons)
    await state.set_state(EditDiaryStates.waiting_for_continue_or_finish)

@block_during_entry
@router.callback_query(EditDiaryStates.waiting_for_continue_or_finish, F.data.in_({"edit_continue", "edit_finish"}))
async def process_continue_or_finish(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "edit_continue":
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ü–ª—é—Å", callback_data="edit_plus")],
            [InlineKeyboardButton(text="‚ûñ –ú–∏–Ω—É—Å", callback_data="edit_minus")],
            [InlineKeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å", callback_data="edit_todo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
        ])
        await callback.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=buttons)
        await state.set_state(EditDiaryStates.waiting_for_edit_choice)
    else:
        await callback.message.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=start_kb)
        await state.clear()

async def ask_next_point(user_id: int):
    state = user_states.get(user_id)
    if not state:
        return
    answers = state.get("answers", [])
    step = len(answers)
    if step >= len(QUESTIONS):
        # –ö–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å
        preview = "\n".join(f"{QUESTIONS[i]} {answers[i]}" for i in range(len(QUESTIONS)))
        await bot.send_message(
            user_id,
            f"üìã –í–æ—Ç –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:\n\n{preview}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",
            reply_markup=fix_kb
        )
        return
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = QUESTIONS[step]
    markup = get_example_button(str(step))  # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Å–µ–≥–¥–∞
    await bot.send_message(user_id, question, reply_markup=markup)

@router.message(Command("search"))
@block_during_entry
async def cmd_search_start(message: Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-24) –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ \n–ó–∞–≤–µ—Ä—à–∏—Ç—å - /cancel:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditDiaryStates.waiting_for_search_query)